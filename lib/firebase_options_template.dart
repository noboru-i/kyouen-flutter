// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:kyouen_flutter/src/config/environment.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    if (Environment.isDevelopment) {
      return FirebaseOptions(
        apiKey: 'AIzaSyDummy-dev-key',
        appId: '1:732262258565:web:dev-app-id',
        messagingSenderId: '732262258565',
        projectId: '${Environment.firebaseProjectId}-dev',
        authDomain: '${Environment.firebaseProjectId}-dev.firebaseapp.com',
        storageBucket: '${Environment.firebaseProjectId}-dev.appspot.com',
      );
    }
    return FirebaseOptions(
      apiKey: 'AIzaSyBdummy-prod-key',
      appId: '1:732262258565:web:0dbf4f0f4f4edf15c956ec',
      messagingSenderId: '732262258565',
      projectId: Environment.firebaseProjectId,
      authDomain: '${Environment.firebaseProjectId}.firebaseapp.com',
      storageBucket: '${Environment.firebaseProjectId}.appspot.com',
    );
  }

  static FirebaseOptions get android {
    if (Environment.isDevelopment) {
      return FirebaseOptions(
        apiKey: 'AIzaSyDummy-dev-android-key',
        appId: '1:732262258565:android:dev-app-id',
        messagingSenderId: '732262258565',
        projectId: '${Environment.firebaseProjectId}-dev',
        storageBucket: '${Environment.firebaseProjectId}-dev.appspot.com',
      );
    }
    return FirebaseOptions(
      apiKey: 'AIzaSyBdummy-prod-android-key',
      appId: '1:732262258565:android:d2396fe9d7edf3a8c956ec',
      messagingSenderId: '732262258565',
      projectId: Environment.firebaseProjectId,
      storageBucket: '${Environment.firebaseProjectId}.appspot.com',
    );
  }

  static FirebaseOptions get ios {
    if (Environment.isDevelopment) {
      return FirebaseOptions(
        apiKey: 'AIzaSyDummy-dev-ios-key',
        appId: '1:732262258565:ios:dev-app-id',
        messagingSenderId: '732262258565',
        projectId: '${Environment.firebaseProjectId}-dev',
        storageBucket: '${Environment.firebaseProjectId}-dev.appspot.com',
        iosBundleId: 'hm.orz.chaos114.TumeKyouen.dev',
      );
    }
    return FirebaseOptions(
      apiKey: 'AIzaSyBdummy-prod-ios-key',
      appId: '1:732262258565:ios:480016d65249c8aec956ec',
      messagingSenderId: '732262258565',
      projectId: Environment.firebaseProjectId,
      storageBucket: '${Environment.firebaseProjectId}.appspot.com',
      iosBundleId: 'hm.orz.chaos114.TumeKyouen',
    );
  }
}